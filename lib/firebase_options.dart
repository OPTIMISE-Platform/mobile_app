// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    // ignore: missing_enum_constant_in_switch
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.fuchsia:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for fuchsia - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for linux - '
            'you can reconfigure this by running the FlutterFire CLI again.',
      );
      case TargetPlatform.windows:
        // TODO: Handle this case.
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );}
  }

  static final FirebaseOptions web = FirebaseOptions(
    apiKey: dotenv.env['FirebaseOptionsWebapiKey'] ?? "",
    appId: dotenv.env['FirebaseOptionsWebappId'] ?? "",
    messagingSenderId: dotenv.env['FirebaseOptionsWebmessagingSenderId'] ?? "",
    projectId: dotenv.env['FirebaseOptionsWebprojectId'] ?? "",
    authDomain: dotenv.env['FirebaseOptionsWebauthDomain'] ?? "",
    storageBucket: dotenv.env['FirebaseOptionsWebstorageBucket'] ?? "",
  );

  static final FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.env['FirebaseOptionsAndroidapiKey'] ?? "",
    appId: dotenv.env['FirebaseOptionsAndroidappId'] ?? "",
    messagingSenderId: dotenv.env['FirebaseOptionsAndroidmessagingSenderId'] ?? "",
    projectId:dotenv.env['FirebaseOptionsAndroidprojectId'] ?? "",
    storageBucket: dotenv.env['FirebaseOptionsAndroidstorageBucket'] ?? "",
  );

  static final FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.env['FirebaseOptionsIosapiKey'] ?? "",
    appId: dotenv.env['FirebaseOptionsIosappId'] ?? "",
    messagingSenderId: dotenv.env['FirebaseOptionsIosmessagingSenderId'] ?? "",
    projectId: dotenv.env['FirebaseOptionsIosprojectId'] ?? "",
    storageBucket: dotenv.env['FirebaseOptionsIosstorageBucket'] ?? "",
    iosClientId: dotenv.env['FirebaseOptionsIosiosClientId'] ?? "",
    iosBundleId:  dotenv.env['FirebaseOptionsIosiosBundleId'] ?? "",
  );

  static final FirebaseOptions macos = FirebaseOptions(
    apiKey: dotenv.env['FirebaseOptionsMacosapiKey'] ?? "",
    appId: dotenv.env['FirebaseOptionsMacosappId'] ?? "",
    messagingSenderId: dotenv.env['FirebaseOptionsMacosmessagingSenderId'] ?? "",
    projectId:dotenv.env['FirebaseOptionsMacosprojectId'] ?? "",
    storageBucket: dotenv.env['FirebaseOptionsMacosstorageBucket'] ?? "",
    iosClientId: dotenv.env['FirebaseOptionsMacosiosClientId'] ?? "",
    iosBundleId: dotenv.env['FirebaseOptionsMacosiosBundleId'] ?? "",
  );
}
